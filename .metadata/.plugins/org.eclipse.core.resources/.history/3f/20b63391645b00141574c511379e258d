package myapp.rest;

import java.io.DataOutputStream;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Set;

import javax.net.ssl.HttpsURLConnection;

import myapp.Globals;
import myapp.Registered;
import myapp.domain.GCMMessage;
import myapp.domain.Message;
import restx.annotations.GET;
import restx.annotations.POST;
import restx.annotations.RestxResource;
import restx.factory.Component;
import restx.security.PermitAll;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;

@Component @RestxResource
public class HelloResource {
	private static final String fich = "/tmp/users-REST.json";
	private Registered registered;
//    /**
//     * Say hello to currently logged in user.
//     *
//     * Authorized only for principals with Roles.HELLO_ROLE role.
//     *
//     * @return a Message to say hello
//     */
//    @GET("/message")
//    @RolesAllowed(Roles.HELLO_ROLE)
//    public Message sayHello() {
//        return new Message().setMessage(String.format(
//                "hello %s, it's %s",
//                RestxSession.current().getPrincipal().get().getName(),
//                DateTime.now().toString("HH:mm:ss")));
//    }
	private void sendRegisteredMessage(String regId,String mail) throws Exception{
		URL obj = new URL(Globals.GCM_URL);
		HttpsURLConnection con = (HttpsURLConnection) obj.openConnection();
		con.setRequestMethod("POST");
		con.setRequestProperty("Content-Type", "application/json");
		con.setRequestProperty("Authorization", "key=AIzaSyBazwPhhD0N6ddh3Ph0IK59kKOrFjBixZY");
		
		ObjectMapper om = new ObjectMapper();
		String[] userIds = {regId};
		GCMMessage gcmdata = new GCMMessage(userIds);
		gcmdata.addData(Globals.MSG_ACTION,Globals.ACTION_REGISTERED);
		gcmdata.addData(Globals.MSG_MAIL, mail);
		con.setDoOutput(true);
		DataOutputStream wr = new DataOutputStream(con.getOutputStream());
		om.writeValue(wr, gcmdata);
		wr.flush();
		wr.close();
		
		int responseCode = con.getResponseCode();
		System.out.println("\nEnviando POST de registrado");
		System.out.println("Response code: "+responseCode);
	}
    /**
     * Say hello to anybody.
     *
     * Does not require authentication.
     *
     * @return a Message to say hello
     */
    @GET("/hello")
    @PermitAll
    public String helloPublic(String who) {
        return "Hi!";
    }
    
    @POST("/register")
    @PermitAll
    public boolean register(Message message) {
    	System.out.println(message);
    	if(registered == null){
    		registered = new Registered(fich);
    		try {
				registered.backupUsers();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
    		Set<String> keys = message.keySet();
    		for(String s: keys){
    			System.out.println(s+": "+message.value(s));
    		}
    		String mail = message.value(Globals.MSG_MAIL);
    		String regId = message.value(Globals.MSG_REG_ID);
    		String role = message.value(Globals.MSG_ROLE);
    		try {
				registered.backupUsers();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    		if(Globals.ACTION_REQUESTER.equals(role) || Globals.ACTION_CONTAINER.equals(role)){
    			System.out.println("Es un role valido.");
				try {
					return registered.addRegId(mail, regId, role);
				} catch (Exception e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
    		}
    		try {
				sendRegisteredMessage(regId, mail);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        	System.out.println(registered.getNUsers());
        	return false;
    	}
//    	
    	return false;
    }
    @GET("/registered")
    @PermitAll
    public String getRegistered() throws JsonProcessingException{
    	if(registered == null){
    		registered = new Registered(fich);
    		try {
				registered.backupUsers();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	}
    	HashMap<String,LinkedHashMap<String,ArrayList<String>>> registrados = registered.getRegistered();
//	    ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
//		try {
//			return ow.writeValueAsString(registrados);
//		} catch (JsonProcessingException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		return "Ha habido un problema";

	    ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
	    return ow.writeValueAsString(registrados);
    }
}
