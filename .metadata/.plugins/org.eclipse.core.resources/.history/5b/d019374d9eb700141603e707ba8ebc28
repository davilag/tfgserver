import java.security.MessageDigest;
import java.security.Security;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.util.encoders.Hex;


public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Security.addProvider(new BouncyCastleProvider());
		try {
			chunkDecrypt();
			chunckEncrypt();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public static void chunkDecrypt() throws Exception {
	    byte[] key = MessageDigest.getInstance("MD5").digest("som3C0o7p@s5".getBytes());
	    byte[] iv = Hex.decode("EECE34808EF2A9ACE8DF72C9C475D751");
	    byte[] ciphertext = Hex
	            .decode("EF26839493BDA6DA6ABADD575262713171F825F2F477FDBB53029BEADB41928EA5FB46737D7A94D5BE74B6049008443664F0E0D883943D0EFBEA09DB");

	    Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding", BouncyCastleProvider.PROVIDER_NAME);
	    cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key, "AES"), new IvParameterSpec(iv));

	    int chunkSize = 16;
	    byte[] inBuffer = new byte[chunkSize];
	    int outBufferSize = ((chunkSize + 15) / 16) * 16;
	    byte[] outBuffer = new byte[outBufferSize];

	    for (int i = 0; i < ciphertext.length; i += chunkSize) {
	        int thisChunkSize = Math.min(chunkSize, ciphertext.length - i);
	        System.arraycopy(ciphertext, i, inBuffer, 0, thisChunkSize);
	        int num = cipher.update(inBuffer, 0, thisChunkSize, outBuffer);
	        if (num > 0) {
	        	System.out.println("update #" + ((i / chunkSize) + 1) + " - data <"
	                    + new String(outBuffer, 0, num) + ">");
	        }
	    }
	    int num = cipher.doFinal(inBuffer, chunkSize, 0, outBuffer);
	    System.out.println("doFinal - data <" + new String(outBuffer, 0, num) + ">");
	}
	
	public static void chunckEncrypt() throws Exception{
		byte[] key = MessageDigest.getInstance("MD5").digest("som3C0o7p@s5".getBytes());
		byte[] iv = Hex.decode("EECE34808EF2A9ACE8DF72C9C475D751");
		String plainTextIn = "Hola mundo";
		
		Cipher cipherEncrypt = Cipher.getInstance("AES/GCM/NoPadding", BouncyCastleProvider.PROVIDER_NAME);
		cipherEncrypt.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key,"AES"), new IvParameterSpec(iv));
		byte[] encrypted = cipherEncrypt.doFinal(plainTextIn.getBytes());
		byte[] encryptedValue = Base64.encodeBase64(encrypted);
		
		System.out.println("La salida del encrypt es: "+encryptedValue);
		
		Cipher cipherDecrypt = Cipher.getInstance("AES/GCM/NoPadding", BouncyCastleProvider.PROVIDER_NAME);
		cipherDecrypt.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key,"AES"), new IvParameterSpec(iv));
		byte[] decryptedBytes = Base64.decodeBase64(encryptedValue);
		byte[] original = cipherDecrypt.doFinal(decryptedBytes);
		System.out.println(new String(original));
	}
}
